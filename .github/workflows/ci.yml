name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 13 * * *' # Daily at 1PM UTC

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.20', '1.21']
        terraform-version: ['1.0', '1.1', '1.2', '1.3', '1.4', '1.5', '1.6']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ matrix.terraform-version }}
        terraform_wrapper: false

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run unit tests
      run: |
        go test -v -count=1 -parallel=4 -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files need formatting:"
          gofmt -s -l .
          exit 1
        fi

    - name: Go vet
      run: go vet ./...

    - name: Check for suspicious constructs
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./...

  security:
    name: Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

    - name: Nancy vulnerability scan
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o dist/terraform-provider-snowflake-ovh_linux_amd64
        GOOS=windows GOARCH=amd64 go build -o dist/terraform-provider-snowflake-ovh_windows_amd64.exe
        GOOS=darwin GOARCH=amd64 go build -o dist/terraform-provider-snowflake-ovh_darwin_amd64
        GOOS=darwin GOARCH=arm64 go build -o dist/terraform-provider-snowflake-ovh_darwin_arm64

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: provider-binaries
        path: dist/

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install tfplugindocs
      run: go install github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs@latest

    - name: Generate documentation
      run: tfplugindocs generate

    - name: Check for documentation changes
      run: |
        if [[ -n $(git status --porcelain docs/) ]]; then
          echo "Documentation is out of date. Please run 'tfplugindocs generate' and commit the changes."
          git status --porcelain docs/
          exit 1
        fi

  acceptance:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-acceptance-tests'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6'
        terraform_wrapper: false

    - name: Run acceptance tests
      env:
        TF_ACC: 1
        # Note: Actual credentials should be stored in GitHub Secrets
        # OVH_ENDPOINT: ${{ secrets.OVH_ENDPOINT }}
        # OVH_APPLICATION_KEY: ${{ secrets.OVH_APPLICATION_KEY }}
        # OVH_APPLICATION_SECRET: ${{ secrets.OVH_APPLICATION_SECRET }}
        # OVH_CONSUMER_KEY: ${{ secrets.OVH_CONSUMER_KEY }}
        # SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        # SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
        # SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      run: |
        go test -v -count=1 -parallel=4 -timeout=60m ./internal/provider/
      continue-on-error: true # Don't fail CI if we don't have test credentials

  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6'

    - name: Validate examples
      run: |
        for dir in examples/*/; do
          if [[ -f "$dir/main.tf" ]]; then
            echo "Validating $dir"
            cd "$dir"
            terraform init -backend=false
            terraform validate
            cd - > /dev/null
          fi
        done

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Check licenses
      run: |
        go-licenses check ./...
        go-licenses report ./... > licenses.txt

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.txt

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6'
        terraform_wrapper: false

    - name: Build provider
      run: go build -o terraform-provider-snowflake-ovh

    - name: Install provider locally
      run: |
        mkdir -p ~/.terraform.d/plugins/registry.terraform.io/swcstudio/snowflake-ovh/0.1.0/linux_amd64
        mv terraform-provider-snowflake-ovh ~/.terraform.d/plugins/registry.terraform.io/swcstudio/snowflake-ovh/0.1.0/linux_amd64/

    - name: Test provider installation
      run: |
        cd examples/local-dev
        terraform init
        terraform validate
        terraform plan -var-file=terraform.tfvars.example || true

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, docs]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify on failure
      run: |
        echo "CI failed on main branch"
        # Add Slack/Teams/Email notification here if needed